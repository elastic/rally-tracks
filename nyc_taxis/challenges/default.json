    {
      "name": "append-no-conflicts",
      "description": "Indexes the whole document corpus using a setup that will lead to a larger indexing throughput than the default settings and produce a smaller index (higher compression rate). Document ids are unique so all index operations are append only. After that a couple of queries are run.",
      "default": true,
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s"
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "index": "nyc_taxis",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "operation": "wait-until-merges-finish"
        },
        {# serverless-post-ingest-sleep-marker-start #}{%- if post_ingest_sleep|default(false) -%}
        {
          "name": "post-ingest-sleep",
          "operation": {
            "operation-type": "sleep",
            "duration": {{ post_ingest_sleep_duration|default(30) }}
          }
        },
        {%- endif -%}{# serverless-post-ingest-sleep-marker-end #}
        {
          "name": "default_no_target",
          "operation": "default",
          "warmup-iterations": 50,
          "iterations": 100
        },
        {
          "operation": "default",
          "warmup-iterations": 50,
          "iterations": 100,
          "target-throughput": 3
        },
        {
          "operation": "default_1k",
          "warmup-iterations": 50,
          "iterations": 100,
          "target-throughput": 3
        },
        {
          "operation": "range",
          "warmup-iterations": 50,
          "iterations": 100
        },
        {
          "operation": "distance_amount_agg",
          "warmup-iterations": 50,
          "iterations": 50
        },
        {
          "operation": "autohisto_agg",
          "warmup-iterations": 50,
          "iterations": 100
        },
        {
          "operation": "date_histogram_agg",
          "warmup-iterations": 500,
          "iterations": 500
        }
      ]
    },
    {
      "name": "append-no-conflicts-index-only",
      "description": "Indexes the whole document corpus using a setup that will lead to a larger indexing throughput than the default settings and produce a smaller index (higher compression rate). Document ids are unique so all index operations are append only.",
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s"
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "index": "nyc_taxis",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "operation": "wait-until-merges-finish"
        }
      ]
    },
    {
      "name": "append-sorted-no-conflicts-index-only",
      "description": "Indexes the whole document corpus in an index sorted by pickup_datetime field in descending order (most recent first) and using a setup that will lead to a larger indexing throughput than the default settings and produce a smaller index (higher compression rate). Document ids are unique so all index operations are append only.",
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s",
              "index.sort.field": "pickup_datetime",
              "index.sort.order": "desc"
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "index": "nyc_taxis",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "operation": "wait-until-merges-finish"
        }
      ]
    },
    {
      "name": "update",
      "description": "Bulk indexes documents with conflicts with additional force-merge and refresh operations.",
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.number_of_shards": {{number_of_shards | default(1)}},
              "index.number_of_replicas": {{number_of_replicas | default(0)}},
              "index.store.type": "{{store_type | default('fs')}}"
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "update",
          "warmup-time-period": 1200,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "index": "nyc_taxis",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "operation": "wait-until-merges-finish"
        }
      ]
    },
    {
      "name": "update-only",
      "description": "Bulk indexes documents with conflicts without additional force-merge and refresh operations.",
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.store.type": "{{store_type | default('fs')}}"
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "update",
          "warmup-time-period": 1200,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        }
      ]
    },
{% set ml_job_id="benchmark_ml_job" %}
{% set ml_feed_id="benchmark_nyc_taxis_feed" %}
    {
      "name": "append-ml",
      "description": "Indexes the whole document corpus and executes a machine learning job",
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s"
            }{%- endif %}
          }
        },
        {
          "operation": {
            "operation-type": "delete-ml-datafeed",
            "datafeed-id": "{{ml_feed_id}}",
            "force": true
          }
        },
        {
          "operation": {
            "operation-type": "delete-ml-job",
            "job-id": "{{ml_job_id}}",
            "force": true
          }
        },
        {
          "operation": {
            "operation-type": "create-ml-job",
            "job-id": "{{ml_job_id}}",
            "body": {
              "description": "NYC Taxis (count)",
              "analysis_config": {
                "bucket_span": "1h",
                "influencers": [
                  "rate_code_id",
                  "vendor_id",
                  "store_and_fwd_flag",
                  "payment_type",
                  "trip_type",
                  "passenger_count"
                ],
                "detectors": [
                  {
                    "detector_description": "metric(trip_distance)",
                    "function": "metric",
                    "field_name": "trip_distance",
                    "partition_field_name": "passenger_count",
                    "use_null": true
                  },
                  {
                    "detector_description": "metric(total_amount)",
                    "function": "metric",
                    "field_name": "total_amount",
                    "partition_field_name": "passenger_count",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(trip_distance)",
                    "function": "varp",
                    "field_name": "trip_distance",
                    "partition_field_name": "passenger_count",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(total_amount)",
                    "function": "varp",
                    "field_name": "total_amount",
                    "partition_field_name": "passenger_count",
                    "use_null": true
                  },
                  {
                    "detector_description": "metric(trip_distance)",
                    "function": "metric",
                    "field_name": "trip_distance",
                    "partition_field_name": "trip_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "metric(total_amount)",
                    "function": "metric",
                    "field_name": "total_amount",
                    "partition_field_name": "trip_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(trip_distance)",
                    "function": "varp",
                    "field_name": "trip_distance",
                    "partition_field_name": "trip_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(total_amount)",
                    "function": "varp",
                    "field_name": "total_amount",
                    "partition_field_name": "trip_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "metric(trip_distance)",
                    "function": "metric",
                    "field_name": "trip_distance",
                    "partition_field_name": "payment_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "metric(total_amount)",
                    "function": "metric",
                    "field_name": "total_amount",
                    "partition_field_name": "payment_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(trip_distance)",
                    "function": "varp",
                    "field_name": "trip_distance",
                    "partition_field_name": "payment_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "varp(total_amount)",
                    "function": "varp",
                    "field_name": "total_amount",
                    "partition_field_name": "payment_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "count",
                    "function": "count",
                    "partition_field_name": "passenger_count",
                    "use_null": true
                  },
                  {
                    "detector_description": "count",
                    "function": "count",
                    "partition_field_name": "payment_type",
                    "use_null": true
                  },
                  {
                    "detector_description": "count",
                    "function": "count",
                    "partition_field_name": "trip_type",
                    "use_null": true
                  }
                ]
              },
              "data_description": {
                "time_field": "pickup_datetime",
                "time_format": "epoch_ms"
              },
              "model_plot_config": {
                "enabled": false
              }
            }
          }
        },
        {
          "operation": {
            "operation-type": "open-ml-job",
            "job-id": "{{ml_job_id}}"
          }
        },
        {
          "operation": {
            "operation-type": "create-ml-datafeed",
            "datafeed-id": "{{ml_feed_id}}",
            "body": {
              "job_id": "{{ml_job_id}}",
              "indices": [
                "nyc_taxis"
              ],
              "scroll_size": 10000,
              "chunking_config": {
                "mode": "auto"
              }
            }
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": {
            "operation-type": "force-merge",
            "index": "nyc_taxis",
            "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
            "max-num-segments": {{ force_merge_max_num_segments | tojson }}
            {%- endif %}
          }
        },
        {
          "name": "refresh-after-force-merge",
          "operation": "refresh"
        },
        {
          "operation": "wait-until-merges-finish"
        },
        {# serverless-post-ingest-sleep-marker-start #}{%- if post_ingest_sleep|default(false) -%}
        {
          "name": "post-ingest-sleep",
          "operation": {
            "operation-type": "sleep",
            "duration": {{ post_ingest_sleep_duration|default(30) }}
          }
        },
        {%- endif -%}{# serverless-post-ingest-sleep-marker-end #}
        {
          "operation": {
            "operation-type": "start-ml-datafeed",
            "datafeed-id": "{{ml_feed_id}}",
            "start": "2015-01-01T00:00:00",
            "end": "2016-01-01T00:00:00"
          }
        },
        {
          "operation": {
            "operation-type": "wait-for-ml-lookback",
            "include-in-reporting": false,
            "datafeed-id": "{{ml_feed_id}}"
          }
        },
        {
          "operation": {
            "operation-type": "close-ml-job",
            "job-id": "{{ml_job_id}}"
          }
        }
      ]
    },
    {
      "name": "aggs",
      "description": "Checks the performance of some aggregations",
      "default": false,
      "schedule": [
        {
          "operation": "delete-index"
        },
        {
          "operation": {
            "operation-type": "create-index",
            "index": "nyc_taxis",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s"
            }{%- endif %}
          }
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          }
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh"
        },
        {
          "operation": "date_histogram_calendar_interval",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_calendar_interval_with_tz",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_tz",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_metrics",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "auto_date_histogram",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "auto_date_histogram_with_tz",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "auto_date_histogram_with_metrics",
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-terms",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-histogram",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-date_histogram-daily",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-date_histogram-weekly",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-date_histogram-monthly",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-geotile_grid-precision-8",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-geotile_grid-precision-12",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite-geotile_grid-precision-15",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sampler-keyword",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sampler-numeric",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "percentiles-tdigest-compression-default",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "percentiles-tdigest-compression-200",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "multi_terms-keyword",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        }
      ]
    },
    {
      "name": "esql",
      "description": "Performance benchmarks for internal R&D on query languages. This is work in progress",
      "default": false,
      "schedule": [
        {
          "operation": "delete-index",
          "tags": ["setup"]
        },
        {
          "operation": {
            "operation-type": "create-index",
            "settings": {%- if index_settings is defined %} {{index_settings | tojson}} {%- else %} {
              {# non-serverless-index-settings-marker-start #}{%- if build_flavor != "serverless" or serverless_operator == true -%}
              "index.translog.flush_threshold_size": "4g",
              {%- endif -%}{# non-serverless-index-settings-marker-end #}
              "index.codec": "best_compression",
              "index.refresh_interval": "30s"
            }{%- endif %}
          },
          "tags": ["setup"]
        },
        {
          "name": "check-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "index": "nyc_taxis",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          },
          "tags": ["setup"]
        },
        {
          "operation": "index-enrich-sources",
          "tags": ["setup"]
        },
        {
          "name": "refresh-after-index-enrich-sources",
          "operation": "refresh",
          "tags": ["setup"]
        },
        {
          "name": "check-enrich-cluster-health",
          "operation": {
            "operation-type": "cluster-health",
            "request-params": {
              "wait_for_status": "{{cluster_health | default('green')}}",
              "wait_for_no_relocating_shards": "true"
            },
            "retry-until-success": true
          },
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-pipeline",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_rate_codes",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_rate_codes",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_rate_codes_fares",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_rate_codes_fares",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_payment_types",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_payment_types",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_payment_types_fares",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_payment_types_fares",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_trip_types",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_trip_types",
          "tags": ["setup"]
        },
        {
          "operation": "delete-enrich-nyc_vendors",
          "tags": ["setup"]
        },
        {
          "operation": "create-enrich-nyc_vendors",
          "tags": ["setup"]
        },
        {
          "name": "refresh-before-execute-enrich",
          "operation": "refresh",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_rate_codes",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_rate_codes_fares",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_payment_types",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_payment_types_fares",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_trip_types",
          "tags": ["setup"]
        },
        {
          "operation": "execute-enrich-nyc_vendors",
          "tags": ["setup"]
        },
        {
          "operation": "index",
          "warmup-time-period": 240,
          "clients": {{bulk_indexing_clients | default(8)}},
          "ignore-response-error-level": "{{error_level | default('non-fatal')}}",
          "tags": ["setup"]
        },
        {
          "name": "refresh-after-index",
          "operation": "refresh",
          "tags": ["setup"]
        },
        {
          "operation": "avg_passenger_count_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_filtered_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_filtered_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_filtered_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_tip_percent_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_tip_percent_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_tip_percent_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_integer_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_integer_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_integer_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_keyword_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_keyword_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_keyword_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "count_group_by_keyword_aggregation",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "count_group_by_keyword_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "count_group_by_keyword_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "multi_terms-keyword",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "composite_terms-keyword",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "multi_terms-keyword_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "multi_terms-keyword_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sort_by_ts_query",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sort_by_ts_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sort_by_ts_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_calendar_interval",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_calendar_interval_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_calendar_interval_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },        
        {
          "operation": "date_histogram_fixed_interval_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_metrics_agg",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_metrics_esql_shard_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_metrics_esql_doc_partitioning",
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_control",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_1",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_2",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_3",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_4",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_rates_fares",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_payments",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_payments_fares",
          "tags": ["enrich"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_control",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_1",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_2",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_3",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_4",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_rates_fares",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_payments",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_payments_fares",
          "tags": ["enrich","stats"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_passenger_count_filtered_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_tip_percent_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_integer_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "avg_amount_group_by_keyword_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "multi_terms-keyword_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "sort_by_ts_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_calendar_interval_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "date_histogram_fixed_interval_with_metrics_esql_limit_0",
          "tags": ["limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_control_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_1_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_2_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_3_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_4_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_rates_fares_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_payments_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_enrich_payments_fares_limit_0",
          "tags": ["enrich", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_control_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_1_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_2_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_3_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_4_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_rates_fares_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_payments_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        },
        {
          "operation": "esql_stats_enrich_payments_fares_limit_0",
          "tags": ["enrich", "stats", "limit0"],
          "clients": 1,
          "warmup-iterations": 10,
          "iterations": 50
        }
      ]
    },
    {
      "name": "update-aggs-only",
      "description": "Bulk indexes documents with conflicts and checks the performance of some aggregations",
      "default": false,
      "schedule": [
        {{ rally.collect(parts="common/update-aggs-only-schedule.json") }}
      ]
    },
    {
      "name": "autoscale",
      "description": "Bulk index with a varying number of clients",
      "default": false,
      "schedule": [
        {{ rally.collect(parts="common/autoscale-schedule.json") }}
      ]
    }
