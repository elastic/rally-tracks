{% import "rally.helpers" as rally %}
{
  "name": "cross-clusters-search",
  "description": "Indexes logs to the default (local) cluster, then replicates to all other clusters specified in 'target-hosts' using CCR, finally searching across all clusters via CCS",
  "schedule": [
    {
        "name": "delete-existing-datastreams-in-all-clusters",
        "operation": {
          "operation-type": "delete-remote-datastream",
          "data-stream": "logs-*"
        }
    },
    {% include "tasks/index-setup.json" %},
    {
      "name": "bulk-index",
      "operation": {
        "operation-type": "raw-bulk",
        "param-source": "processed-source",
        "time-format": "milliseconds",
        "profile": "fixed_interval",
        "bulk-size": {{ p_bulk_size }},
        "detailed-results": true
      },
      "clients": {{ p_bulk_indexing_clients }}{% if p_throttle_indexing %},
      "ignore-response-error-level": "{{error_level | default('non-fatal')}}",
      "schedule": "timestamp-throttler",
      "max-delay-secs": 1
      {% endif %}
    },
    {
        "name": "setup-bi-directional-remote-clusters",
        "operation": {
          "operation-type": "configure-remote-clusters",
          "local-cluster": "default"
        }
    },
    {
        "name": "setup-ccr-on-remote-clusters",
        "operation": {
          "operation-type": "configure-ccr",
          "index": "logs-*",
          "source-cluster": "default"
        }
    },
    {
      "name": "ccs-queries",
      "parallel": {
        "time-period": {{ p_query_time_period }},
        "warmup-time-period": {{ p_query_warmup_time_period }},
        "tasks": [
          {% set target_index = "logs-*,remote*:logs-*" %}
          {% for workflow in p_query_workflows %}
            {
              "name": {{ workflow | tojson }},
              "operation": {
                "operation-type": "composite",
                "param-source": "workflow-selector",
                "workflow": {{workflow | tojson }},
                "workflow-target": {{ target_index | tojson }},
                "detailed-results": true,
                "task-offset": {{ loop.index }},
                "request-params": {{ p_query_request_params | tojson(indent=2) }}
              },
              "think-time-interval": {{ p_user_think_time }},
              "workflow-interval": {{ p_user_workflow_time }},
              "warmup-time-period": {{ p_query_warmup_time_period }},
              "clients": 1,
              "schedule": "workflow-scheduler"
            },
            {
              "name": {{ "%s/no_minimized_roundtrips" | format(workflow) | tojson }},
              "operation": {
                "operation-type": "composite",
                "param-source": "workflow-selector",
                "workflow": {{workflow | tojson }},
                "workflow-target": {{ target_index | tojson }},
                "detailed-results": true,
                "task-offset": {{ loop.index }},
                "request-params": {
                    "ccs_minimize_roundtrips": false
                    {% for key, value in p_query_request_params.items() %}
                        ,{{ key | tojson }} : {{ value | tojson }}
                    {% endfor %}
                }
              },
              "think-time-interval": {{ p_user_think_time }},
              "workflow-interval": {{ p_user_workflow_time }},
              "warmup-time-period": {{ p_query_warmup_time_period }},
              "clients": 1,
              "schedule": "workflow-scheduler"
            },
          {% endfor %}
            {
              "name": "field-caps",
              "operation": {
                "operation-type": "raw-request",
                "path": {{ "/%s/_field_caps?fields=*" | format(target_index) | tojson }},
                "method": "GET"
              },
              "target-interval": {{ p_user_think_time }},
              "schedule": "poisson"
            }
        ]
      }
    }
  ]
}
