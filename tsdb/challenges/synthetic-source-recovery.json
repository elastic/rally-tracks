{
  "name": "synthetic-source-recovery",
  "description": "Indexes the whole document corpus and then runs the recovery api fetching translog operations for a given target index.",
  "default": false,
  "schedule": [
    {%- if ingest_mode is defined and ingest_mode == "data_stream" %}
    {
      "name": "create-all-templates",
      "operation": {
        "operation-type": "create-composable-template",
        "request-params": {
          "create": "true"
        }
      }
    },
    {
      "name": "check-cluster-health",
      "operation": {
        "operation-type": "cluster-health",
        "request-params": {
          "wait_for_status": "{{cluster_health | default('green')}}",
          "wait_for_no_relocating_shards": "true"
        },
        "retry-until-success": true
      }
    },
    {%- else %}
    {
      "operation": "delete-index"
    },
    {
      "operation": {
        "operation-type": "create-index",
        "settings": {{index_settings | default({}) | tojson}}
      }
    },
    {
      "name": "check-cluster-health",
      "operation": {
        "operation-type": "cluster-health",
        "index": "tsdb",
        "request-params": {
          "wait_for_status": "{{cluster_health | default('green')}}",
          "wait_for_no_relocating_shards": "true"
        },
        "retry-until-success": true
      }
    },
    {%- endif %}
    {
      "operation": "index",
      "warmup-time-period": 240,
      "clients": {{bulk_indexing_clients | default(8)}},
      "ignore-response-error-level": "{{error_level | default('non-fatal')}}"
    },
    {
      "name": "refresh-after-index",
      "operation": "refresh"
    },
    {
      "operation": {
        "operation-type": "force-merge",
        "request-timeout": 7200{%- if force_merge_max_num_segments is defined %},
        "max-num-segments": {{ force_merge_max_num_segments | tojson }}
        {%- endif %}
      }
    },
    {
      "name": "wait-until-merges-finish",
      "operation": {
        "operation-type": "index-stats",
        "index": "_all",
        "condition": {
          "path": "_all.total.merges.current",
          "expected-value": 0
        },
        "retry-until-success": true,
        "include-in-reporting": false
      }
    },
    {
      "name": "refresh-after-force-merge",
      "operation": "refresh"
    },
    {# serverless-post-ingest-sleep-marker-start #}{%- if post_ingest_sleep|default(false) -%}
    {
      "name": "post-ingest-sleep",
      "operation": {
        "operation-type": "sleep",
        "duration": {{ post_ingest_sleep_duration|default(30) }}
      }
    },
    {%- endif -%}{# serverless-post-ingest-sleep-marker-end #}
    {
      "name": "add-retention-lease",
      "operation": {
        "operation-type": "raw-request",
        "path": {{ "/%s/seq_no/add_retention_lease" | format(p_recovery_target) | tojson }},
        "method": "PUT"
      },
      "warmup-iterations": 0,
      "iterations": 1
    },
    {
      "name": "shard-recovery",
      "operation": {
        "operation-type": "raw-request",
        "path": {{ "/%s/ccr/shard_changes" | format(p_recovery_target) | tojson }},
        "method": "GET",
        "request-params": {
          "from_seq_no": {{ p_recovery_from_seq_no | tojson }},
          "max_batch_size": {{ p_recovery_max_batch_size | tojson }},
          "poll_timeout": {{ p_recovery_poll_timeout | tojson }},
          "max_operations_count": {{ p_recovery_max_operations_count | tojson }}
        }
      },
      "warmup-iterations": 1,
      "iterations": 10
    }
  ]
}
