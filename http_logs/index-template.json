{
  "priority": 101,
  "index_patterns": ["logs-*", "reindexed-logs"],
  {%- if index_mode == "logsdb" or index_type == "data_stream" %}
  "data_stream": {},
  {%- endif %}
  "template": {
    "settings": {
      {%- if index_mode == "logsdb" %}
      "index.mode": "logsdb",
      {%- endif -%}
      {# non-serverless-index-settings-marker-start -#}
      {%- if build_flavor != "serverless" %}
      "index.number_of_replicas": {{ number_of_replicas | default(0) | tojson }},
      {%- endif -%}
      {%- if build_flavor != "serverless" or serverless_operator == true %}
      "index.number_of_shards": {{ number_of_shards | default(5) | tojson }},
      "index.requests.cache.enable": false
      {%- endif -%}
      {# non-serverless-index-settings-marker-end #}
    },
    "mappings": {
      "dynamic": "strict",
      {%- if index_mode != "logsdb" %}
      "_source": {
        "enabled": {{ source_enabled | default(true) | tojson }}
      },
      {%- endif %}
      "properties": {
        "@timestamp": {
          {%- if (ingest_pipeline is defined and ingest_pipeline == "grok") or runtime_fields is defined %}
          "format": "strict_date_optional_time",
          {%- else %}
          "format": "epoch_second",
          {%- endif %}
          "type": "date"
        },
        {%- if runtime_fields is defined %}
        "message": {
          "type": "wildcard",
          "fields": {
            "keyword": {
              "type": "keyword"
            }
          }
      },
        {%- else %}
        "message": {
          "type": "keyword",
          "index": false,
          "doc_values": false
        },
        {%- endif %}
        "clientip": {
          "type": "ip"
        },
        "request": {
          "type": "match_only_text",
          "fields": {
            "raw": {
              "ignore_above": 256,
              "type": "keyword"
            }
          }
        },
        "status": {
          "type": "integer"
        },
        "size": {
          "type": "integer"
        },
        "geoip" : {
          "properties" : {
            "country_name": { "type": "keyword" },
            "city_name": { "type": "keyword" },
            "location" : { "type" : "geo_point" }
          }
        }
      }
    }
    {%- if runtime_fields is defined %},
    "runtime": {
      {%- set sources = [('source', 'message.source'), ('wildcard', 'message'), ('keyword', 'message.keyword')] %}
      {%- for source_type, field in sources %}
      "grok.from_{{source_type}}.clientip": {
        "type": "ip",
        "script": "emit(grok('%{IPORHOST:clientip} %{HTTPDUSER:httpduser} %{USER:user} \\\\[%{TIMESTAMP_ISO8601:timestamp}\\\\] \"(?:%{WORD:verb} %{NOTSPACE:path}(?: HTTP/%{NOTSPACE:version})?|%{DATA})\" %{NUMBER:status:int} (?:%{NUMBER:size:long}|-)').extract(doc['{{field}}'].value).clientip)"
      },
      "grok.from_{{source_type}}.path": {
        "type": "keyword",
        "script": "emit(grok('%{IPORHOST:clientip} %{HTTPDUSER:httpduser} %{USER:user} \\\\[%{TIMESTAMP_ISO8601:timestamp}\\\\] \"(?:%{WORD:verb} %{NOTSPACE:path}(?: HTTP/%{NOTSPACE:version})?|%{DATA})\" %{NUMBER:status:int} (?:%{NUMBER:size:long}|-)').extract(doc['{{field}}'].value).path)"
      },
      "grok.from_{{source_type}}.status": {
        "type": "long",
        "script": "emit(grok('%{IPORHOST:clientip} %{HTTPDUSER:httpduser} %{USER:user} \\\\[%{TIMESTAMP_ISO8601:timestamp}\\\\] \"(?:%{WORD:verb} %{NOTSPACE:path}(?: HTTP/%{NOTSPACE:version})?|%{DATA})\" %{NUMBER:status:int} (?:%{NUMBER:size:long}|-)').extract(doc['{{field}}'].value).status)"
      },
      "grok.from_{{source_type}}.size": {
        "type": "long",
        "script": "emit(grok('%{IPORHOST:clientip} %{HTTPDUSER:httpduser} %{USER:user} \\\\[%{TIMESTAMP_ISO8601:timestamp}\\\\] \"(?:%{WORD:verb} %{NOTSPACE:path}(?: HTTP/%{NOTSPACE:version})?|%{DATA})\" %{NUMBER:status:int} (?:%{NUMBER:size:long}|-)').extract(doc['{{field}}'].value).size)"
      },
      "grok.from_{{source_type}}.timestamp": {
        "type": "date",
        "script": "emit(parse(grok('%{IPORHOST:clientip} %{HTTPDUSER:httpduser} %{USER:user} \\\\[%{TIMESTAMP_ISO8601:timestamp}\\\\] \"(?:%{WORD:verb} %{NOTSPACE:path}(?: HTTP/%{NOTSPACE:version})?|%{DATA})\" %{NUMBER:status:int} (?:%{NUMBER:size:long}|-)').extract(doc['{{field}}'].value).timestamp))"
      },
      {%- endfor %}
      {%- for source_type, field in sources %}
      "dissect.from_{{source_type}}.clientip": {
        "type": "ip",
        "script": "emit(dissect('%{clientip} %{httpduser} %{user} [%{timestamp}] \"%{verb} %{path} HTTP/%{version}\" %{status} %{size}').extract(doc['{{field}}'].value).clientip)"
      },
      "dissect.from_{{source_type}}.path": {
        "type": "keyword",
        "script": "emit(dissect('%{clientip} %{httpduser} %{user} [%{timestamp}] \"%{verb} %{path} HTTP/%{version}\" %{status} %{size}').extract(doc['{{field}}'].value).path)"
      },
      "dissect.from_{{source_type}}.status": {
        "type": "long",
        "script": "emit(Integer.parseInt(dissect('%{clientip} %{httpduser} %{user} [%{timestamp}] \"%{verb} %{path} HTTP/%{version}\" %{status} %{size}').extract(doc['{{field}}'].value).status))"
      },
      "dissect.from_{{source_type}}.size": {
        "type": "long",
        "script": "emit(Long.parseLong(dissect('%{clientip} %{httpduser} %{user} [%{timestamp}] \"%{verb} %{path} HTTP/%{version}\" %{status} %{size}').extract(doc['{{field}}'].value).size))"
      },
      "dissect.from_{{source_type}}.timestamp": {
        "type": "date",
        "script": "emit(parse(dissect('%{clientip} %{httpduser} %{user} [%{timestamp}] \"%{verb} %{path} HTTP/%{version}\" %{status} %{size}').extract(doc['{{field}}'].value).status))"
      },
      {%- endfor %}
      {%- for source_type, field in sources %}
      "index_of.from_{{source_type}}.clientip": {
        "type": "ip",
        "script": "String m = doc[\"{{field}}\"].value; int end = m.indexOf(\" \"); emit(m.substring(0, end));"
      },
      "index_of.from_{{source_type}}.path": {
        "type": "keyword",
        "script": "String m = doc[\"{{field}}\"].value; int start = m.indexOf(\"\\\"\") + 1; int end = m.indexOf(\"\\\"\", start); emit(m.substring(start, end));"
      },
      "index_of.from_{{source_type}}.status": {
        "type": "long",
        "script": "String m = doc[\"{{field}}\"].value; int end = m.lastIndexOf(\" \"); int start = m.lastIndexOf(\" \", end - 1) + 1; emit(Long.parseLong(m.substring(start, end)));"
      },
      "index_of.from_{{source_type}}.size": {
        "type": "long",
        "script": "String m = doc[\"{{field}}\"].value; int start = m.lastIndexOf(\" \") + 1; emit(Long.parseLong(m.substring(start)));"
      },
      "index_of.from_{{source_type}}.timestamp": {
        "type": "date",
        "script": "String m = doc[\"{{field}}\"].value; int start = m.indexOf(\" \"); start = m.indexOf(\" \", start + 1); start = m.indexOf(\" \", start + 1); int end = m.indexOf(\" \", start + 1); emit(parse(m.substring(start + 2, end - 1)));"
      },
      {%- endfor %}
      "message.source": {
        "type": "keyword",
        "script": "emit(params._source.message)"
      }
    }{% endif %}
  }
}
